#|

The registry machine.

The usual pattern is to submit the prelude code to a machine before the
machine-specific code (i.e., before this file). So we can assume the prelude is
already available.

Note that there are quite a few things that we skipped in the interest of
succintness:

- Authentication and authorization
- Nonces and machine ids to prevent replay attacks
- Restricting eval

You can load this file in a REPL.
|#

(import prelude/set :as 'set)
(import prelude/patterns :unqualified)
(import prelude/strings '[unlines] :unqualified)
(import prelude/ref '[modify-ref] :unqualified)
(import prelude/lens '[over-ref .. @] :unqualified)

;; Basic functionality

(def projects
  "A dict with all known projects"
  (ref {}))

(def add-project
  ""
  (fn [project desc]
      (modify-ref projects
                  (fn [ps] (insert project {:description desc :stars 0} ps)))))

(def star-project
  ""
  (fn [project]
      (over-ref projects
                (.. (@ project) (@ :stars))
                (fn [stars] (+ stars 1)))))

(def list-projects
  ""
  (fn []
      (read-ref projects)))

(def query
  "A pretty version of list-projects. The default frontend by default queries 'query'"
  (fn []
      (def go
        (fn [p]
            (match p
                   ['project {:description 'd :stars 'n}] (string-append
                                               "Project: "
                                               project
                                               "\nDescription: "
                                               d
                                               "\nStars: "
                                               (show n))
                   _ (do
                       (put-str! "Improper project")
                       (exit! 1)))))
      (unlines (map go (seq (list-projects))))))

;; The HTML frontend

(def html
  "A ref that keeps the current frontend."
  (ref "QmWa7eSia84unLafaxaMWEr1teZY1DB3HVUTDrHn2YKh8N"))

(def get-html
  "Get the current frontend. Used by the radicle daemon."
  (fn []
      (read-ref html)))

(def set-html
  "Get the current frontend. Used by the radicle daemon."
  (fn [h]
      (write-ref html h)))
